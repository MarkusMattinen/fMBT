==================
fMBT tool adapters
==================


Introduction
------------

Adapters are responsible for translation between actions in test
models and what actually happens in systems under test (SUT) and test
environments. This document describes how adapters work in the fMBT
tool, how a generic adapter can be extended, and how to implement new
adapters.

After a brief overview, we will introduce adapter stacks and concepts
of local and remote adapters. Then we will introduce a generic
adapter, and finally show how to implement your own local and remote
adapters.


Overview
--------

Adapters have two responsibilities in the fMBT tool:

1. they read an input action suggested by the test generator, try to
   execute it, and finally report the result back to the generator in
   the form of any (input or output) action, or a special "unknown
   response" action.

2. they make observations on SUT and the test environment, and report
   the results to the test generator in the form of output actions.

As said, the first responsibility handles *input actions*. These
actions interact with the SUT or the test environment. In the model
these actions are always prefixed with "i". For instance, let

    iSetOperationMode('offline')

be an input action that changes the operation mode of a device. If the
action would correspond to a function call in an API of the SUT,
adapter might just make the call and report the action to be
executed. In another setting the action might be a high level
description that the adapter would unfold to series of commands, like

    if (stop_services() < 0) {
        adapter_log("go offline: stopping services failed\n");
        abort();
    }
    pwr_before = read_power_consumption();
    set_oper_mode(OM_OFFLINE);
    pwr_after = read_power_consumption();
    if (power_after > pwr_before - RADIO_PWR)
        adapter_log("go offline warning: power consumption high\n");

Input actions can specify the required return values as well. For
instance,

    iGetOperationMode() == 'offline'
    iGetOperationMode() == 'online'

might correspond to calling the same method in the API of the SUT, but
they require a different return value. It can happen that the test
generator suggests executing the first action, but when the adapter
calls the method, it gets 'online' as a return value. In this case the
adapter would report that the second action was executed.

The second responsibility handles *output actions*, that is, actions
whose execution has been observed by the adapter. In the model these
actions are always prefixed with "o". For instance,

    oOperationModeChanged('online')
    oOperationModeChanged('offline')

are two output actions which correspond to the SUT reporting operation
mode changes to its users.


Adapter stack
-------------

Local adapters are adapters which implement the fMBT adapter API and
are instantiated inside the process that also generates the test, that
is fmbt. Remote adapters are adapters that implement the adapter
protocol. They are running on a separate process, but may or may not
run on the same host.

There is always at least one local adapter in a test run. The name and
the parameters of the adapter are specified in a test configuration
file.

Adapter stack may contain the following building blocks.

- adapter_remote is a local adapter that acts as a bridge between the
  model (or a higher level adapter) and any remote
  adapter. adapter_remote takes one parameter: a shell command. It
  forks and executes the command that should launch a new remote
  adapter. Child processes standard input, output and error are used
  for communication between adapter_remote and the remote adapter. For
  example, a test configuration file can contain specification:

    adapter = "remote(ssh root@testhost /usr/local/bin/remote_python)"

- adapter_mapper is a local adapter that forwards actions between the
  model (or a higher level adapter) and any number of local
  adapters. It takes a configuration file as a parameter. The file
  defines two things. First, it lists lower level adapters and their
  parameters. Second, it defines a mapping between actions in the
  model (or a higher level adapter) to actions in the lower level
  adapters. The mapping allows renaming of actions, too, making the
  configuration file a convenient place to convert human readable
  actions in the model into commands or expressions to be run in
  low-level adapters. For example, configuration

    1 = "remote(ssh root@testhost /usr/local/bin/remote_python)"
    2 = "remote(/usr/local/bin/remote_exec.sh)"
    "itesthost:(.*)"   -> (1, "$1")
    "ilocalhost:(.*)"  -> (2, "$1")

  sends actions "itesthost:X" as actions "X" to remote_python adapter
  running on testhost, and "ilocalhost:Y" as "Y" to remote_exec.sh
  running on localhost. Obviously adapter_mapper makes the adapter
  stack actually a tree.

  The mapper adapter can map single input actions to several inputs
  for different subadapters. For instance,

  "iReset" -> (1, "reset()") (2, "rm -rf /tmp/testdata")

  If subadapter reports execution of other action than what it was
  given in the multiaction case, the mapper adapter reports failed
  execution. This can be avoided by giving possibly failing subadapter
  actions in brackets instead of parenthesis. For instance,

  "iReset" -> (1, "reset_all()") [2, "rm -rf /tmp/testdata"]

  allows execution of "rm -rf /tmp/testadata" to fail, but requires
  reset_all() to be executed without errors.

- adapter_dlopen is a local adapter that loads a shared library
  containing local adapters and instantiates an adapter from
  there. For instance, test configuration

  adapter = "dlopen(myadapters.so,mylocal(xyz))"

  loads myadapters.so and uses "mylocal" adapter with parameters "xyz"
  as a top level adapter.

- remote_adapter_loader runs local adapters as remote adapters. With
  the mapper adapter this enables using several local adapters on
  several hosts in the same test run. remote_adapter_loader takes two
  command line arguments: the name of the local adapter and parameters
  for it.


remote_python - a generic adapter
---------------------------------

remote_python is a generic remote adapter implemented in Python. The
adapter executes actions as expressions in Python interpreter.

remote_python can be run on local and remote hosts. To install
remote_python on any host it is enough to copy remote_python script
there.

remote_python is able to import Python libraries. This allows, for
instance, implementing test steps as Python functions into a library,
and importing the library for the test run. There are two ways to do
this:

1. remote_python command line parameter "-c" in the test configuration
   file. Example:

   adapter = "remote(remote_python -c 'from myteststeps import *')"

2. action that executes import statement in the model. Example:
   "iCatch('from myteststeps import *')"

The difference is that (1) is configurable in the test configuration
file and (2) is run dynamically during the test if necessary.

Having the test step library imported, test step functions can be
called directly from actions in the model. For instance, executing
action "iDeviceConfiguration() == 'product'" calls
iDeviceConfiguration() function and expects the return value
'product'.

Test steps can write entries to remote_python adapter log and fmbt
main log with functions adapterlog and fmbtlog from the fmbt library.

Test step libraries can report observed events (output actions) with
the reportOutput function from the fmbt library. remote_python runs in
gobject mainloop to enable reacting to asynchronous events.

For convenience, the remote_python adapter adds some functions to the
namespace where actions are evaluated. Input actions are

iCatch(statement)

    executes the statement in the Python interpreter. The namespace is
    the same as in ordinary expressions without "iCatch". If the
    execution raises an exception, the exception is returned inside an
    Error object for easy comparison. Otherwise, None is returned.

    Examples:

    "iCatch('foo+=2') == Error('NameError:.*')"

    is successfully executed if variable "foo" is not defined.

    "iCatch('foo=2')"

    defines that variable foo has value 2. The variable can be used in
    expressions in other actions.

iShell(command)

    forks and lets shell execute the command in the child
    process. Stdout and stderr of the child will be logged. Returns
    Python subprocess instance.

    Example:

    "iShell('killall myd; sleep 1; killall -9 myd; myd >/tmp/myd.output 2>&1; sleep 1')"

    terminates (and kills) existing instance of my daemon "myd", then
    launches a new instance and directs its output to /tmp/myd.output.

iDBus(bus, service, objpath, interface[, timeout = s])

    returns D-Bus interface of the specified object. If the timeout
    parameter is given, then the method call made through this
    interface will timeout after given number of seconds.

    Example:

    "iDBus('system', 'net.connman', '/', 'net.connman.Manager').SetProperty('OfflineMode', False) == None"

iDBusListen(bus, service, signalname)

    registers a listener for the given signal, returns None.


The rules for executing actions and reporting the results are the
following:

- If an action does not include a top-level comparison, like

  iRemoveDir("/var/run/lock/sut.lock")

  the expression is executed and execution of the action is reported
  if it does not raise an exception. The return value is logged. If an
  exception is raised, remote_python either reports execution of a
  matching action, such as

  iRemoveDir("/var/run/lock/sut.lock") == Error('.*No such file.*')

  or execution of an unidentified action if there is no matching
  action. This will cause test to fail.

- If an action includes a top-level comparison operator, like

  os.system("mkdir /var/run/lock/sut.lock 2>/dev/null") == 0
  os.system("mkdir /var/run/lock/sut.lock 2>/dev/null") in range(1,255)
  os.system("mkdir /var/run/lock/sut.lock 2>/dev/null") > 254

  the left hand side is evaluated first. The result is stored, and
  then the following evaluations are made until the comparison returns
  True:

  result == 0
  result in range(1,255)
  result > 254

  That is, the result is compared to all right hand side values of
  actions that have the same left hand side expression. Finally the
  execution of the corresponding action is reported to the SUT, or an
  error is reported if there is no corresponding action.

- the adapter generates output actions from D-Bus signals it listens
  to. For instance, after executing action

  iDBusListen('session','com.example.TestService','HelloSignal')

  it will start capturing HelloSignals. Once one is received, the
  adapter will report it as an execution of the corresponding output
  action. For instance,

  oDBusSignal('HelloSignal', 42)

  is reported whenever HelloSignal is emitted with argument 42. On the
  other hand, if such action is not defined, but

  oDBusSignal('HelloSignal', StoreAs(helloSignalArg))

  is, that will be reported and helloSignalArg variable in the action
  evaluation namespace in the adapter will contain value 42. That
  value can be used in later action names, such as in

  iCatch('assert 1 <= helloSignalArg < 128') == None


Remote adapters
---------------

Remote adapters read input as ASCII from standard input. They report
execution results as ASCII to standard output (output actions) and
standard error (executed input actions).

The protocol of a remote adapter is the following:

1. read an integer n from standard input. This is the number of
actions that can be used in the test run.

2. read n actions, each on its own row, from standard input. Action
names are urlencoded. (If "remote_noencode" is used as a local
adapter, then action names are not urlencoded, but they cannot contain
line breaks.)

3. Run in loop:

3.1 Read integer n from stdin.

3.2 Execute (n+1)th action.

3.3 If the execution and the observed result corresponds to the
    (m+1)th action, write m to standard error.

    If there is no action that would match to the execution and the
    result, write 0 to standard error.

3.4 Whenever an output is observed, write the index of the
    corresponding output action to standard output.


Local adapters
--------------

Local adapters are inherited from the Adapter base class
(adapter.hh). They must implement

- "execute" method that takes index of suggested action as a
  parameter, tries to execute it, and reports the executed
  action in the i/o parameter.

- "observe" method for reporting executions of output
  actions. observe takes two parameters:

  1) output parameter for reporting executed action

  2) boolean value "block". If the value is True, observe should
  wait until there is output to be reported before returning. If block
  is False, then observe should report output actions that have
  been already observed.

Example: a simple local adapter for testing a MySUT class:

$ cat > mylocaladapter.cc << EOF
#include "adapter.hh"
#include "mysut.hh"

class MyLocalAdapter: public Adapter {
public:
    MyLocalAdapter(Log& log, std::string params):
        Adapter(log, params), m_mysut(NULL) {
        log.print("<adapter name=\"mylocal\" params=\"%s\" />\n",
                  params.c_str());
    }

    void execute(std::vector<int>& action) {

        std::string suggested(getActionName(action[0]));

        // Example 1: input executed, nothing checked
        if ("iInstantiate" == suggested) {
            m_mysut = new MySUT();
        } else

        // Example 2: input executed, result checked
        if ("iFoo:NoError" == suggested) {
            m_mysut->foo();
            if (m_mysut->error()) {
                log.print("<adapter name=\"mylog\""
                          "msg=\"iFoo caused error %d\">",
                          m_mysut->error());
                action[0] = 0;
            }
        } else

        // Example 3: might report different action
        if ("iBar=0" == suggested ||
            "iBar=1" == suggested) {
            int result = m_mysut->bar();
            if (result == 0)      action[0] = getActionNumber("iBar=0");
            else if (result == 1) action[0] = getActionNumber("iBar=1");
            else action[0] = 0; // no matching action
        }
    }

    int observe(std::vector<int> &action,bool block=false) {
        return false;
    }

protected:
    MySUT* m_mysut;
};

FACTORY_DEFAULT_CREATOR(Adapter, MyLocalAdapter, "mylocal")
EOF

The FACTORY_DEFAULT_CREATOR macro registers MyLocalAdapter to Adapter
factory with a default creator function. The default creator
instantiates adapter class if "mylocal" adapter is needed in any
configuration file. The constructor will be passed a log object and
configuration parameters, that is, xyz in configuration
adapter="mylocal(xyz)".

For completeness of this example, here is an implementation for MySUT.

$ cat > mysut.hh << EOF
class MySUT {
public:
    MySUT(): m_count(0), m_error(0) {}
    void foo()  { m_count++; }
    int bar()   { return m_count; }
    int error() { return m_error; }
private:
    int m_count;
    int m_error;
};
EOF


Building local adapter
----------------------

There are two options how to build a local adapter: a shared library
or link it statically. Building and using a shared library works as
follows:

$ g++ -g -O0 -Wall -fPIC -shared mylocaladapter.cc -o myadapters.so

Shared library adapter can be used through the "dlopen" adapter:

$ cat > plugin-test.conf << EOF
model        = "mysut.lsts"
heuristic    = "lookahead(1)"
coverage     = "perm(1)"
adapter      = "dlopen(myadapters.so,mylocal(xyz))"
pass         = "coverage(1.0)"
EOF

Let's verify this really works. Create a model and run a test:

$ fmbt-gt -o mysut.lsts 'P(s0,p)->T(s0,"iInstantiate",s1)T(s1,"iBar=0",s2)'

$ LD_LIBRARY_PATH=. fmbt -Lplugin.log plugin-test.conf

Alternatively, an adapter can be statically linked to fmbt by adding
it to LOCAL_ADAPTERS in src/Sources.mk and rebuilding it.

$ sed -i 's/^\(LOCAL_ADAPTERS =.*\)$/\1 mylocaladapter.cc/' Sources.mk

$ make fmbt

In this case we can use it directly in the configuration file:

$ cat > static-test.conf << EOF
model        = "mysut.lsts"
heuristic    = "lookahead(1)"
coverage     = "perm(1)"
adapter      = "mylocal(xyz)"
pass         = "coverage(1.0)"
EOF

and finally run the test to verify that it works:

$ fmbt -Lstatic.log static-test.conf
